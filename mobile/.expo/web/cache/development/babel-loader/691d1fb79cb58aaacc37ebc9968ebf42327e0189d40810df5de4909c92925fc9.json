{"ast":null,"code":"import { tagMessage } from \"../../utils\";\nvar Reanimated;\ntry {\n  Reanimated = require('react-native-reanimated');\n  if (!Reanimated.useSharedValue) {\n    Reanimated = undefined;\n    throw new Error('react-native-reanimated is not found');\n  }\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = function () {\n      var _f = function _f() {\n        console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));\n      };\n      _f._closure = {\n        tagMessage: tagMessage\n      };\n      _f.asString = \"function _f(){const{tagMessage}=jsThis._closure;{console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));}}\";\n      _f.__workletHash = 7202219436890;\n      _f.__location = \"C:\\\\Users\\\\pedro_hf_rocha\\\\Documents\\\\SA_2023_3B_SesiSenai_Storage\\\\mobile\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\reanimatedWrapper.js (15:33)\";\n      return _f;\n    }();\n  }\n} catch (e) {}\nexport { Reanimated };","map":{"version":3,"names":["tagMessage","Reanimated","require","useSharedValue","undefined","Error","setGestureState","_f","console","warn","_closure","e"],"sources":["C:\\Users\\pedro_hf_rocha\\Documents\\SA_2023_3B_SesiSenai_Storage\\mobile\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\reanimatedWrapper.ts"],"sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.useSharedValue) {\n    // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n    // reset the module to undefined so we can fallback to the default implementation\n    Reanimated = undefined;\n    throw new Error('react-native-reanimated is not found');\n  }\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = () => {\n      'worklet';\n      console.warn(\n        tagMessage(\n          'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n        )\n      );\n    };\n  }\n  // When 'react-native-reanimated' is not available we want to\n  // quietly continue\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nexport { Reanimated };\n"],"mappings":"AAKA,SAASA,UAAT;AAMA,IAAIC,UAAJ;AAkBA,IAAI;EACFA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAApB;EAEA,IAAI,CAACD,UAAU,CAACE,cAAhB,EAAgC;IAG9BF,UAAU,GAAGG,SAAb;IACA,MAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;EACD;EAED,IAAI,CAACJ,UAAU,CAACK,eAAhB,EAAiC;IAC/BL,UAAU,CAACK,eAAX;MAAA,IAAAC,EAAA,YAAAA,GAAA,EAAmC;QAEjCC,OAAO,CAACC,IAAR,CACET,UAAU,CACR,gGADQ,CADZ;MAKD,CAPD;MAAAO,EAAA,CAAAG,QAAA;QAAAV,UAAA,E;;;;;;OAAA;EAQD;AAIF,CAvBD,CAuBE,OAAOW,CAAP,EAAU,CAAE;AAEd,SAASV,UAAT"},"metadata":{},"sourceType":"module","externalDependencies":[]}