{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nvar isNative = !shouldBeUseWeb();\nexport var measure;\nif (isWeb()) {\n  measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = function measure(_animatedRef) {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = function () {\n    var _f = function _f(animatedRef) {\n      if (!_WORKLET) {\n        console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' + 'only available in the UI runtime. This may also happen if measure() ' + 'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' + 'calls the given worklet on the JS runtime during render. If you want to ' + 'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' + 'only be called on the UI runtime after the render has been completed.');\n        return null;\n      }\n      var viewTag = animatedRef();\n      if (viewTag === -1) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n        return null;\n      }\n      var measured = _measure(viewTag);\n      if (measured === null) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n        return null;\n      } else if (measured.x === -1234567) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n        return null;\n      } else if (isNaN(measured.x)) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n        return null;\n      } else {\n        return measured;\n      }\n    };\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef){if(!_WORKLET){console.warn('[Reanimated] measure() was called from the main JS context. Measure is '+'only available in the UI runtime. This may also happen if measure() '+'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle '+'calls the given worklet on the JS runtime during render. If you want to '+'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will '+'only be called on the UI runtime after the render has been completed.');return null;}const viewTag=animatedRef();if(viewTag===-1){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}const measured=_measure(viewTag);if(measured===null){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}else if(measured.x===-1234567){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" returned an invalid measurement response.\\\");return null;}else if(isNaN(measured.x)){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\\\");return null;}else{return measured;}}\";\n    _f.__workletHash = 4824065265814;\n    _f.__location = \"C:\\\\Users\\\\Lucas Werpp Franco\\\\Documents\\\\Projetos-VScode\\\\SA_2023_3B_SesiSenai_Storage\\\\mobile\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (29:14)\";\n    return _f;\n  }();\n}\nexport var scrollTo;\nif (isWeb()) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      var element = animatedRef();\n      element.scrollTo({\n        x: x,\n        y: y,\n        animated: animated\n      });\n    };\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef,x,y,animated){const element=animatedRef();element.scrollTo({x:x,y:y,animated:animated});}\";\n    _f.__workletHash = 1539328189141;\n    _f.__location = \"C:\\\\Users\\\\Lucas Werpp Franco\\\\Documents\\\\Projetos-VScode\\\\SA_2023_3B_SesiSenai_Storage\\\\mobile\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (65:15)\";\n    return _f;\n  }();\n} else if (isNative) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      if (!_WORKLET) {\n        return;\n      }\n      var viewTag = animatedRef();\n      _scrollTo(viewTag, x, y, animated);\n    };\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef,x,y,animated){if(!_WORKLET){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}\";\n    _f.__workletHash = 11267178326065;\n    _f.__location = \"C:\\\\Users\\\\Lucas Werpp Franco\\\\Documents\\\\Projetos-VScode\\\\SA_2023_3B_SesiSenai_Storage\\\\mobile\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (73:15)\";\n    return _f;\n  }();\n} else {\n  scrollTo = function scrollTo(_animatedRef, _x, _y) {};\n}\nexport var setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET || !isNative) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n      return;\n    }\n    _setGestureState(handlerTag, newState);\n  };\n  _f._closure = {\n    isNative: isNative\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isNative}=jsThis._closure;{if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 11162109634360;\n  _f.__location = \"C:\\\\Users\\\\Lucas Werpp Franco\\\\Documents\\\\Projetos-VScode\\\\SA_2023_3B_SesiSenai_Storage\\\\mobile\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (87:7)\";\n  return _f;\n}();","map":{"version":3,"names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_f","_WORKLET","viewTag","measured","_measure","isNaN","_closure","asString","__workletHash","__location","scrollTo","animated","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["C:/Users/Lucas Werpp Franco/Documents/Projetos-VScode/SA_2023_3B_SesiSenai_Storage/mobile/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nconst isNative = !shouldBeUseWeb();\nexport let measure;\nif (isWeb()) {\n    measure = (animatedRef) => {\n        const element = animatedRef(); // TODO: fix typing of animated refs on web\n        const viewportOffset = element.getBoundingClientRect();\n        return {\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n            x: element.offsetLeft,\n            y: element.offsetTop,\n            pageX: viewportOffset.left,\n            pageY: viewportOffset.top,\n        };\n    };\n}\nelse if (isChromeDebugger()) {\n    measure = (_animatedRef) => {\n        console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n        return null;\n    };\n}\nelse {\n    measure = (animatedRef) => {\n        'worklet';\n        if (!_WORKLET) {\n            console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' +\n                'only available in the UI runtime. This may also happen if measure() ' +\n                'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n                'calls the given worklet on the JS runtime during render. If you want to ' +\n                'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n                'only be called on the UI runtime after the render has been completed.');\n            return null;\n        }\n        const viewTag = animatedRef();\n        if (viewTag === -1) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        const measured = _measure(viewTag);\n        if (measured === null) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        else if (measured.x === -1234567) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);\n            return null;\n        }\n        else if (isNaN(measured.x)) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);\n            return null;\n        }\n        else {\n            return measured;\n        }\n    };\n}\nexport let scrollTo;\nif (isWeb()) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        const element = animatedRef();\n        // @ts-ignore same call as in react-native-web\n        element.scrollTo({ x, y, animated });\n    };\n}\nelse if (isNative) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        if (!_WORKLET) {\n            return;\n        }\n        const viewTag = animatedRef();\n        _scrollTo(viewTag, x, y, animated);\n    };\n}\nelse {\n    scrollTo = (_animatedRef, _x, _y) => {\n        // no-op\n    };\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET || !isNative) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n        return;\n    }\n    _setGestureState(handlerTag, newState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}