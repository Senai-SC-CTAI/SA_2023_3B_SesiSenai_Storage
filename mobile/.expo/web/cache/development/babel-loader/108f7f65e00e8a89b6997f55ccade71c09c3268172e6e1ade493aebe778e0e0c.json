{"ast":null,"code":"import { useCallback } from 'react';\nimport { useAnimatedStyle } from \"./useAnimatedStyle\";\nexport var useAnimatedProps = useAnimatedStyle;\nexport function useWorkletCallback(fun, deps) {\n  return useCallback(fun, deps != null ? deps : []);\n}\nexport { useEvent, useHandler } from \"./utils\";","map":{"version":3,"names":["useCallback","useAnimatedStyle","useAnimatedProps","useWorkletCallback","fun","deps","useEvent","useHandler"],"sources":["C:\\Users\\tiago_m_joao\\Documents\\SA\\SA_2023_3B_SesiSenai_Storage\\mobile\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\Hooks.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useAnimatedStyle } from './useAnimatedStyle';\nimport type { DependencyList } from './commonTypes';\nimport type { useAnimatedPropsType } from '../helperTypes';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n// when you need styles to animated you should always use useAS\n// TODO TYPESCRIPT This is a temporary cast to get rid of .d.ts file.\nexport const useAnimatedProps = useAnimatedStyle as useAnimatedPropsType;\n\nexport function useWorkletCallback<A extends unknown[], R>(\n  fun: (...args: A) => R,\n  deps?: DependencyList\n): (...args: Parameters<typeof fun>) => R {\n  return useCallback(fun, deps ?? []);\n}\n\nexport { useEvent, useHandler } from './utils';\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,gBAAgB;AAOzB,OAAO,IAAMC,gBAAgB,GAAGD,gBAAwC;AAExE,OAAO,SAASE,kBAAkBA,CAChCC,GAAsB,EACtBC,IAAqB,EACmB;EACxC,OAAOL,WAAW,CAACI,GAAG,EAAEC,IAAI,WAAJA,IAAI,GAAI,EAAE,CAAC;AACrC;AAEA,SAASC,QAAQ,EAAEC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}