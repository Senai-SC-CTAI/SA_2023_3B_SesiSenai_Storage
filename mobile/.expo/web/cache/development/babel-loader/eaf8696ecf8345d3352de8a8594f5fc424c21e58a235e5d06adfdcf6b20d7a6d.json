{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"animationIn\", \"animationInTiming\", \"animationOut\", \"animationOutTiming\", \"avoidKeyboard\", \"coverScreen\", \"hasBackdrop\", \"backdropColor\", \"backdropOpacity\", \"backdropTransitionInTiming\", \"backdropTransitionOutTiming\", \"customBackdrop\", \"children\", \"isVisible\", \"onModalShow\", \"onBackButtonPress\", \"useNativeDriver\", \"propagateSwipe\", \"style\"],\n  _excluded2 = [\"testID\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as PropTypes from 'prop-types';\nimport * as animatable from 'react-native-animatable';\nimport { initializeAnimations, buildAnimations, reversePercentage } from \"./utils\";\nimport styles from \"./modal.style\";\ninitializeAnimations();\nvar defaultProps = {\n  animationIn: 'slideInUp',\n  animationInTiming: 300,\n  animationOut: 'slideOutDown',\n  animationOutTiming: 300,\n  avoidKeyboard: false,\n  coverScreen: true,\n  hasBackdrop: true,\n  backdropColor: 'black',\n  backdropOpacity: 0.7,\n  backdropTransitionInTiming: 300,\n  backdropTransitionOutTiming: 300,\n  customBackdrop: null,\n  useNativeDriver: false,\n  deviceHeight: null,\n  deviceWidth: null,\n  hideModalContentWhileAnimating: false,\n  propagateSwipe: false,\n  isVisible: false,\n  panResponderThreshold: 4,\n  swipeThreshold: 100,\n  onModalShow: function onModalShow() {\n    return null;\n  },\n  onModalWillShow: function onModalWillShow() {\n    return null;\n  },\n  onModalHide: function onModalHide() {\n    return null;\n  },\n  onModalWillHide: function onModalWillHide() {\n    return null;\n  },\n  onBackdropPress: function onBackdropPress() {\n    return null;\n  },\n  onBackButtonPress: function onBackButtonPress() {\n    return null;\n  },\n  scrollTo: null,\n  scrollOffset: 0,\n  scrollOffsetMax: 0,\n  scrollHorizontal: false,\n  statusBarTranslucent: false,\n  supportedOrientations: ['portrait', 'landscape']\n};\nvar extractAnimationFromProps = function extractAnimationFromProps(props) {\n  return {\n    animationIn: props.animationIn,\n    animationOut: props.animationOut\n  };\n};\nexport var ReactNativeModal = function (_React$Component) {\n  _inherits(ReactNativeModal, _React$Component);\n  var _super = _createSuper(ReactNativeModal);\n  function ReactNativeModal(props) {\n    var _this;\n    _classCallCheck(this, ReactNativeModal);\n    _this = _super.call(this, props);\n    _this.state = {\n      showContent: true,\n      isVisible: false,\n      deviceWidth: Dimensions.get('window').width,\n      deviceHeight: Dimensions.get('window').height,\n      isSwipeable: !!_this.props.swipeDirection,\n      pan: null\n    };\n    _this.isTransitioning = false;\n    _this.inSwipeClosingState = false;\n    _this.currentSwipingDirection = null;\n    _this.panResponder = null;\n    _this.didUpdateDimensionsEmitter = null;\n    _this.interactionHandle = null;\n    _this.getDeviceHeight = function () {\n      return _this.props.deviceHeight || _this.state.deviceHeight;\n    };\n    _this.getDeviceWidth = function () {\n      return _this.props.deviceWidth || _this.state.deviceWidth;\n    };\n    _this.onBackButtonPress = function () {\n      if (_this.props.onBackButtonPress && _this.props.isVisible) {\n        _this.props.onBackButtonPress();\n        return true;\n      }\n      return false;\n    };\n    _this.shouldPropagateSwipe = function (evt, gestureState) {\n      return typeof _this.props.propagateSwipe === 'function' ? _this.props.propagateSwipe(evt, gestureState) : _this.props.propagateSwipe;\n    };\n    _this.buildPanResponder = function () {\n      var animEvt = null;\n      _this.panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n          if (!_this.shouldPropagateSwipe(evt, gestureState)) {\n            var shouldSetPanResponder = Math.abs(gestureState.dx) >= _this.props.panResponderThreshold || Math.abs(gestureState.dy) >= _this.props.panResponderThreshold;\n            if (shouldSetPanResponder && _this.props.onSwipeStart) {\n              _this.props.onSwipeStart(gestureState);\n            }\n            _this.currentSwipingDirection = _this.getSwipingDirection(gestureState);\n            animEvt = _this.createAnimationEventForSwipe();\n            return shouldSetPanResponder;\n          }\n          return false;\n        },\n        onStartShouldSetPanResponder: function onStartShouldSetPanResponder(e, gestureState) {\n          var hasScrollableView = e._dispatchInstances && e._dispatchInstances.some(function (instance) {\n            return /scrollview|flatlist/i.test(instance.type);\n          });\n          if (hasScrollableView && _this.shouldPropagateSwipe(e, gestureState) && _this.props.scrollTo && _this.props.scrollOffset > 0) {\n            return false;\n          }\n          if (_this.props.onSwipeStart) {\n            _this.props.onSwipeStart(gestureState);\n          }\n          _this.currentSwipingDirection = null;\n          return true;\n        },\n        onPanResponderMove: function onPanResponderMove(evt, gestureState) {\n          if (!_this.currentSwipingDirection) {\n            if (gestureState.dx === 0 && gestureState.dy === 0) {\n              return;\n            }\n            _this.currentSwipingDirection = _this.getSwipingDirection(gestureState);\n            animEvt = _this.createAnimationEventForSwipe();\n          }\n          if (_this.isSwipeDirectionAllowed(gestureState)) {\n            var newOpacityFactor = 1 - _this.calcDistancePercentage(gestureState);\n            _this.backdropRef && _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity * newOpacityFactor\n            });\n            animEvt(evt, gestureState);\n            if (_this.props.onSwipeMove) {\n              _this.props.onSwipeMove(newOpacityFactor, gestureState);\n            }\n          } else {\n            if (_this.props.scrollTo) {\n              if (_this.props.scrollHorizontal) {\n                var offsetX = -gestureState.dx;\n                if (offsetX > _this.props.scrollOffsetMax) {\n                  offsetX -= (offsetX - _this.props.scrollOffsetMax) / 2;\n                }\n                _this.props.scrollTo({\n                  x: offsetX,\n                  animated: false\n                });\n              } else {\n                var offsetY = -gestureState.dy;\n                if (offsetY > _this.props.scrollOffsetMax) {\n                  offsetY -= (offsetY - _this.props.scrollOffsetMax) / 2;\n                }\n                _this.props.scrollTo({\n                  y: offsetY,\n                  animated: false\n                });\n              }\n            }\n          }\n        },\n        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {\n          var accDistance = _this.getAccDistancePerDirection(gestureState);\n          if (accDistance > _this.props.swipeThreshold && _this.isSwipeDirectionAllowed(gestureState)) {\n            if (_this.props.onSwipeComplete) {\n              _this.inSwipeClosingState = true;\n              _this.props.onSwipeComplete({\n                swipingDirection: _this.getSwipingDirection(gestureState)\n              }, gestureState);\n              return;\n            }\n            if (_this.props.onSwipe) {\n              _this.inSwipeClosingState = true;\n              _this.props.onSwipe();\n              return;\n            }\n          }\n          if (_this.props.onSwipeCancel) {\n            _this.props.onSwipeCancel(gestureState);\n          }\n          if (_this.backdropRef) {\n            _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity\n            });\n          }\n          Animated.spring(_this.state.pan, {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            bounciness: 0,\n            useNativeDriver: false\n          }).start();\n          if (_this.props.scrollTo) {\n            if (_this.props.scrollOffset > _this.props.scrollOffsetMax) {\n              _this.props.scrollTo({\n                y: _this.props.scrollOffsetMax,\n                animated: true\n              });\n            }\n          }\n        }\n      });\n    };\n    _this.getAccDistancePerDirection = function (gestureState) {\n      switch (_this.currentSwipingDirection) {\n        case 'up':\n          return -gestureState.dy;\n        case 'down':\n          return gestureState.dy;\n        case 'right':\n          return gestureState.dx;\n        case 'left':\n          return -gestureState.dx;\n        default:\n          return 0;\n      }\n    };\n    _this.getSwipingDirection = function (gestureState) {\n      if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n        return gestureState.dx > 0 ? 'right' : 'left';\n      }\n      return gestureState.dy > 0 ? 'down' : 'up';\n    };\n    _this.calcDistancePercentage = function (gestureState) {\n      switch (_this.currentSwipingDirection) {\n        case 'down':\n          return (gestureState.moveY - gestureState.y0) / ((_this.props.deviceHeight || _this.state.deviceHeight) - gestureState.y0);\n        case 'up':\n          return reversePercentage(gestureState.moveY / gestureState.y0);\n        case 'left':\n          return reversePercentage(gestureState.moveX / gestureState.x0);\n        case 'right':\n          return (gestureState.moveX - gestureState.x0) / ((_this.props.deviceWidth || _this.state.deviceWidth) - gestureState.x0);\n        default:\n          return 0;\n      }\n    };\n    _this.createAnimationEventForSwipe = function () {\n      if (_this.currentSwipingDirection === 'right' || _this.currentSwipingDirection === 'left') {\n        return Animated.event([null, {\n          dx: _this.state.pan.x\n        }], {\n          useNativeDriver: false\n        });\n      } else {\n        return Animated.event([null, {\n          dy: _this.state.pan.y\n        }], {\n          useNativeDriver: false\n        });\n      }\n    };\n    _this.isDirectionIncluded = function (direction) {\n      return Array.isArray(_this.props.swipeDirection) ? _this.props.swipeDirection.includes(direction) : _this.props.swipeDirection === direction;\n    };\n    _this.isSwipeDirectionAllowed = function (_ref) {\n      var dy = _ref.dy,\n        dx = _ref.dx;\n      var draggedDown = dy > 0;\n      var draggedUp = dy < 0;\n      var draggedLeft = dx < 0;\n      var draggedRight = dx > 0;\n      if (_this.currentSwipingDirection === 'up' && _this.isDirectionIncluded('up') && draggedUp) {\n        return true;\n      } else if (_this.currentSwipingDirection === 'down' && _this.isDirectionIncluded('down') && draggedDown) {\n        return true;\n      } else if (_this.currentSwipingDirection === 'right' && _this.isDirectionIncluded('right') && draggedRight) {\n        return true;\n      } else if (_this.currentSwipingDirection === 'left' && _this.isDirectionIncluded('left') && draggedLeft) {\n        return true;\n      }\n      return false;\n    };\n    _this.handleDimensionsUpdate = function () {\n      if (!_this.props.deviceHeight && !_this.props.deviceWidth) {\n        var deviceWidth = Dimensions.get('window').width;\n        var deviceHeight = Dimensions.get('window').height;\n        if (deviceWidth !== _this.state.deviceWidth || deviceHeight !== _this.state.deviceHeight) {\n          _this.setState({\n            deviceWidth: deviceWidth,\n            deviceHeight: deviceHeight\n          });\n        }\n      }\n    };\n    _this.open = function () {\n      if (_this.isTransitioning) {\n        return;\n      }\n      _this.isTransitioning = true;\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: _this.props.backdropOpacity\n        }, _this.props.backdropTransitionInTiming);\n      }\n      if (_this.state.isSwipeable) {\n        _this.state.pan.setValue({\n          x: 0,\n          y: 0\n        });\n      }\n      if (_this.contentRef) {\n        _this.props.onModalWillShow && _this.props.onModalWillShow();\n        if (_this.interactionHandle == null) {\n          _this.interactionHandle = InteractionManager.createInteractionHandle();\n        }\n        _this.contentRef.animate(_this.animationIn, _this.props.animationInTiming).then(function () {\n          _this.isTransitioning = false;\n          if (_this.interactionHandle) {\n            InteractionManager.clearInteractionHandle(_this.interactionHandle);\n            _this.interactionHandle = null;\n          }\n          if (!_this.props.isVisible) {\n            _this.close();\n          } else {\n            _this.props.onModalShow();\n          }\n        });\n      }\n    };\n    _this.close = function () {\n      if (_this.isTransitioning) {\n        return;\n      }\n      _this.isTransitioning = true;\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: 0\n        }, _this.props.backdropTransitionOutTiming);\n      }\n      var animationOut = _this.animationOut;\n      if (_this.inSwipeClosingState) {\n        _this.inSwipeClosingState = false;\n        if (_this.currentSwipingDirection === 'up') {\n          animationOut = 'slideOutUp';\n        } else if (_this.currentSwipingDirection === 'down') {\n          animationOut = 'slideOutDown';\n        } else if (_this.currentSwipingDirection === 'right') {\n          animationOut = 'slideOutRight';\n        } else if (_this.currentSwipingDirection === 'left') {\n          animationOut = 'slideOutLeft';\n        }\n      }\n      if (_this.contentRef) {\n        _this.props.onModalWillHide && _this.props.onModalWillHide();\n        if (_this.interactionHandle == null) {\n          _this.interactionHandle = InteractionManager.createInteractionHandle();\n        }\n        _this.contentRef.animate(animationOut, _this.props.animationOutTiming).then(function () {\n          _this.isTransitioning = false;\n          if (_this.interactionHandle) {\n            InteractionManager.clearInteractionHandle(_this.interactionHandle);\n            _this.interactionHandle = null;\n          }\n          if (_this.props.isVisible) {\n            _this.open();\n          } else {\n            _this.setState({\n              showContent: false\n            }, function () {\n              _this.setState({\n                isVisible: false\n              }, function () {\n                _this.props.onModalHide();\n              });\n            });\n          }\n        });\n      }\n    };\n    _this.makeBackdrop = function () {\n      if (!_this.props.hasBackdrop) {\n        return null;\n      }\n      if (_this.props.customBackdrop && !React.isValidElement(_this.props.customBackdrop)) {\n        console.warn('Invalid customBackdrop element passed to Modal. You must provide a valid React element.');\n      }\n      var _this$props = _this.props,\n        customBackdrop = _this$props.customBackdrop,\n        backdropColor = _this$props.backdropColor,\n        useNativeDriver = _this$props.useNativeDriver,\n        useNativeDriverForBackdrop = _this$props.useNativeDriverForBackdrop,\n        onBackdropPress = _this$props.onBackdropPress;\n      var hasCustomBackdrop = !!_this.props.customBackdrop;\n      var backdropComputedStyle = [{\n        width: _this.getDeviceWidth(),\n        height: _this.getDeviceHeight(),\n        backgroundColor: _this.state.showContent && !hasCustomBackdrop ? backdropColor : 'transparent'\n      }];\n      var backdropWrapper = React.createElement(animatable.View, {\n        ref: function ref(_ref2) {\n          return _this.backdropRef = _ref2;\n        },\n        useNativeDriver: useNativeDriverForBackdrop !== undefined ? useNativeDriverForBackdrop : useNativeDriver,\n        style: [styles.backdrop, backdropComputedStyle]\n      }, hasCustomBackdrop && customBackdrop);\n      if (hasCustomBackdrop) {\n        return backdropWrapper;\n      }\n      return React.createElement(TouchableWithoutFeedback, {\n        onPress: onBackdropPress\n      }, backdropWrapper);\n    };\n    var _buildAnimations = buildAnimations(extractAnimationFromProps(props)),\n      animationIn = _buildAnimations.animationIn,\n      animationOut = _buildAnimations.animationOut;\n    _this.animationIn = animationIn;\n    _this.animationOut = animationOut;\n    if (_this.state.isSwipeable) {\n      _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n        pan: new Animated.ValueXY()\n      });\n      _this.buildPanResponder();\n    }\n    if (props.isVisible) {\n      _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n        isVisible: true,\n        showContent: true\n      });\n    }\n    return _this;\n  }\n  _createClass(ReactNativeModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onSwipe) {\n        console.warn('`<Modal onSwipe=\"...\" />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n      }\n      this.didUpdateDimensionsEmitter = DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);\n      if (this.state.isVisible) {\n        this.open();\n      }\n      BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPress);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPress);\n      if (this.didUpdateDimensionsEmitter) {\n        this.didUpdateDimensionsEmitter.remove();\n      }\n      if (this.interactionHandle) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = null;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.animationIn !== prevProps.animationIn || this.props.animationOut !== prevProps.animationOut) {\n        var _buildAnimations2 = buildAnimations(extractAnimationFromProps(this.props)),\n          animationIn = _buildAnimations2.animationIn,\n          animationOut = _buildAnimations2.animationOut;\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n      }\n      if (this.props.backdropOpacity !== prevProps.backdropOpacity && this.backdropRef) {\n        this.backdropRef.transitionTo({\n          opacity: this.props.backdropOpacity\n        }, this.props.backdropTransitionInTiming);\n      }\n      if (this.props.isVisible && !prevProps.isVisible) {\n        this.open();\n      } else if (!this.props.isVisible && prevProps.isVisible) {\n        this.close();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props2 = this.props,\n        animationIn = _this$props2.animationIn,\n        animationInTiming = _this$props2.animationInTiming,\n        animationOut = _this$props2.animationOut,\n        animationOutTiming = _this$props2.animationOutTiming,\n        avoidKeyboard = _this$props2.avoidKeyboard,\n        coverScreen = _this$props2.coverScreen,\n        hasBackdrop = _this$props2.hasBackdrop,\n        backdropColor = _this$props2.backdropColor,\n        backdropOpacity = _this$props2.backdropOpacity,\n        backdropTransitionInTiming = _this$props2.backdropTransitionInTiming,\n        backdropTransitionOutTiming = _this$props2.backdropTransitionOutTiming,\n        customBackdrop = _this$props2.customBackdrop,\n        children = _this$props2.children,\n        isVisible = _this$props2.isVisible,\n        onModalShow = _this$props2.onModalShow,\n        onBackButtonPress = _this$props2.onBackButtonPress,\n        useNativeDriver = _this$props2.useNativeDriver,\n        propagateSwipe = _this$props2.propagateSwipe,\n        style = _this$props2.style,\n        otherProps = _objectWithoutProperties(_this$props2, _excluded);\n      var testID = otherProps.testID,\n        containerProps = _objectWithoutProperties(otherProps, _excluded2);\n      var computedStyle = [{\n        margin: this.getDeviceWidth() * 0.05,\n        transform: [{\n          translateY: 0\n        }]\n      }, styles.content, style];\n      var panHandlers = {};\n      var panPosition = {};\n      if (this.state.isSwipeable) {\n        panHandlers = _objectSpread({}, this.panResponder.panHandlers);\n        if (useNativeDriver) {\n          panPosition = {\n            transform: this.state.pan.getTranslateTransform()\n          };\n        } else {\n          panPosition = this.state.pan.getLayout();\n        }\n      }\n      var _children = this.props.hideModalContentWhileAnimating && this.props.useNativeDriver && !this.state.showContent ? React.createElement(animatable.View, null) : children;\n      var containerView = React.createElement(animatable.View, Object.assign({}, panHandlers, {\n        ref: function ref(_ref3) {\n          return _this2.contentRef = _ref3;\n        },\n        style: [panPosition, computedStyle],\n        pointerEvents: \"box-none\",\n        useNativeDriver: useNativeDriver\n      }, containerProps), _children);\n      if (!coverScreen && this.state.isVisible) {\n        return React.createElement(View, {\n          pointerEvents: \"box-none\",\n          style: [styles.backdrop, styles.containerBox]\n        }, this.makeBackdrop(), containerView);\n      }\n      return React.createElement(Modal, Object.assign({\n        transparent: true,\n        animationType: 'none',\n        visible: this.state.isVisible,\n        onRequestClose: onBackButtonPress\n      }, otherProps), this.makeBackdrop(), avoidKeyboard ? React.createElement(KeyboardAvoidingView, {\n        behavior: Platform.OS === 'ios' ? 'padding' : undefined,\n        pointerEvents: \"box-none\",\n        style: computedStyle.concat([{\n          margin: 0\n        }])\n      }, containerView) : containerView);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if (!state.isVisible && nextProps.isVisible) {\n        return {\n          isVisible: true,\n          showContent: true\n        };\n      }\n      return null;\n    }\n  }]);\n  return ReactNativeModal;\n}(React.Component);\nReactNativeModal.propTypes = {\n  animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationInTiming: PropTypes.number,\n  animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationOutTiming: PropTypes.number,\n  avoidKeyboard: PropTypes.bool,\n  coverScreen: PropTypes.bool,\n  hasBackdrop: PropTypes.bool,\n  backdropColor: PropTypes.string,\n  backdropOpacity: PropTypes.number,\n  backdropTransitionInTiming: PropTypes.number,\n  backdropTransitionOutTiming: PropTypes.number,\n  customBackdrop: PropTypes.node,\n  children: PropTypes.node.isRequired,\n  deviceHeight: PropTypes.number,\n  deviceWidth: PropTypes.number,\n  isVisible: PropTypes.bool.isRequired,\n  hideModalContentWhileAnimating: PropTypes.bool,\n  propagateSwipe: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  onModalShow: PropTypes.func,\n  onModalWillShow: PropTypes.func,\n  onModalHide: PropTypes.func,\n  onModalWillHide: PropTypes.func,\n  onBackButtonPress: PropTypes.func,\n  onBackdropPress: PropTypes.func,\n  panResponderThreshold: PropTypes.number,\n  onSwipeStart: PropTypes.func,\n  onSwipeMove: PropTypes.func,\n  onSwipeComplete: PropTypes.func,\n  onSwipeCancel: PropTypes.func,\n  swipeThreshold: PropTypes.number,\n  swipeDirection: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf(['up', 'down', 'left', 'right'])), PropTypes.oneOf(['up', 'down', 'left', 'right'])]),\n  useNativeDriver: PropTypes.bool,\n  useNativeDriverForBackdrop: PropTypes.bool,\n  style: PropTypes.any,\n  scrollTo: PropTypes.func,\n  scrollOffset: PropTypes.number,\n  scrollOffsetMax: PropTypes.number,\n  scrollHorizontal: PropTypes.bool,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right']))\n};\nReactNativeModal.defaultProps = defaultProps;\nexport default ReactNativeModal;","map":{"version":3,"names":["React","Animated","DeviceEventEmitter","Dimensions","InteractionManager","KeyboardAvoidingView","Modal","PanResponder","BackHandler","Platform","TouchableWithoutFeedback","View","PropTypes","animatable","initializeAnimations","buildAnimations","reversePercentage","styles","defaultProps","animationIn","animationInTiming","animationOut","animationOutTiming","avoidKeyboard","coverScreen","hasBackdrop","backdropColor","backdropOpacity","backdropTransitionInTiming","backdropTransitionOutTiming","customBackdrop","useNativeDriver","deviceHeight","deviceWidth","hideModalContentWhileAnimating","propagateSwipe","isVisible","panResponderThreshold","swipeThreshold","onModalShow","onModalWillShow","onModalHide","onModalWillHide","onBackdropPress","onBackButtonPress","scrollTo","scrollOffset","scrollOffsetMax","scrollHorizontal","statusBarTranslucent","supportedOrientations","extractAnimationFromProps","props","ReactNativeModal","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","state","showContent","get","width","height","isSwipeable","swipeDirection","pan","isTransitioning","inSwipeClosingState","currentSwipingDirection","panResponder","didUpdateDimensionsEmitter","interactionHandle","getDeviceHeight","getDeviceWidth","shouldPropagateSwipe","evt","gestureState","buildPanResponder","animEvt","create","onMoveShouldSetPanResponder","shouldSetPanResponder","Math","abs","dx","dy","onSwipeStart","getSwipingDirection","createAnimationEventForSwipe","onStartShouldSetPanResponder","e","hasScrollableView","_dispatchInstances","some","instance","test","type","onPanResponderMove","isSwipeDirectionAllowed","newOpacityFactor","calcDistancePercentage","backdropRef","transitionTo","opacity","onSwipeMove","offsetX","x","animated","offsetY","y","onPanResponderRelease","accDistance","getAccDistancePerDirection","onSwipeComplete","swipingDirection","onSwipe","onSwipeCancel","spring","toValue","bounciness","start","moveY","y0","moveX","x0","event","isDirectionIncluded","direction","Array","isArray","includes","_ref","draggedDown","draggedUp","draggedLeft","draggedRight","handleDimensionsUpdate","setState","open","setValue","contentRef","createInteractionHandle","animate","then","clearInteractionHandle","close","makeBackdrop","isValidElement","console","warn","_this$props","useNativeDriverForBackdrop","hasCustomBackdrop","backdropComputedStyle","backgroundColor","backdropWrapper","createElement","ref","undefined","style","backdrop","onPress","_buildAnimations","_objectSpread","ValueXY","_createClass","key","value","componentDidMount","addListener","addEventListener","componentWillUnmount","removeEventListener","remove","componentDidUpdate","prevProps","_buildAnimations2","render","_this2","_this$props2","children","otherProps","_objectWithoutProperties","_excluded","testID","containerProps","_excluded2","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","containerView","Object","assign","pointerEvents","containerBox","transparent","animationType","visible","onRequestClose","behavior","OS","concat","getDerivedStateFromProps","nextProps","Component","propTypes","oneOfType","string","object","number","bool","node","isRequired","func","arrayOf","oneOf","any"],"sources":["C:/Users/lucas_w_franco/Documents/gitclone/SA_2023_3B_SesiSenai_Storage/mobile/node_modules/react-native-modal/dist/modal.js"],"sourcesContent":["import * as React from 'react';\nimport { Animated, DeviceEventEmitter, Dimensions, InteractionManager, KeyboardAvoidingView, Modal, PanResponder, BackHandler, Platform, TouchableWithoutFeedback, View, } from 'react-native';\nimport * as PropTypes from 'prop-types';\nimport * as animatable from 'react-native-animatable';\nimport { initializeAnimations, buildAnimations, reversePercentage, } from './utils';\nimport styles from './modal.style';\n// Override default react-native-animatable animations\ninitializeAnimations();\nconst defaultProps = {\n    animationIn: 'slideInUp',\n    animationInTiming: 300,\n    animationOut: 'slideOutDown',\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    coverScreen: true,\n    hasBackdrop: true,\n    backdropColor: 'black',\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    customBackdrop: null,\n    useNativeDriver: false,\n    deviceHeight: null,\n    deviceWidth: null,\n    hideModalContentWhileAnimating: false,\n    propagateSwipe: false,\n    isVisible: false,\n    panResponderThreshold: 4,\n    swipeThreshold: 100,\n    onModalShow: (() => null),\n    onModalWillShow: (() => null),\n    onModalHide: (() => null),\n    onModalWillHide: (() => null),\n    onBackdropPress: (() => null),\n    onBackButtonPress: (() => null),\n    scrollTo: null,\n    scrollOffset: 0,\n    scrollOffsetMax: 0,\n    scrollHorizontal: false,\n    statusBarTranslucent: false,\n    supportedOrientations: ['portrait', 'landscape'],\n};\nconst extractAnimationFromProps = (props) => ({\n    animationIn: props.animationIn,\n    animationOut: props.animationOut,\n});\nexport class ReactNativeModal extends React.Component {\n    constructor(props) {\n        super(props);\n        // We use an internal state for keeping track of the modal visibility: this allows us to keep\n        // the modal visible during the exit animation, even if the user has already change the\n        // isVisible prop to false.\n        // We store in the state the device width and height so that we can update the modal on\n        // device rotation.\n        this.state = {\n            showContent: true,\n            isVisible: false,\n            deviceWidth: Dimensions.get('window').width,\n            deviceHeight: Dimensions.get('window').height,\n            isSwipeable: !!this.props.swipeDirection,\n            pan: null,\n        };\n        this.isTransitioning = false;\n        this.inSwipeClosingState = false;\n        this.currentSwipingDirection = null;\n        this.panResponder = null;\n        this.didUpdateDimensionsEmitter = null;\n        this.interactionHandle = null;\n        this.getDeviceHeight = () => this.props.deviceHeight || this.state.deviceHeight;\n        this.getDeviceWidth = () => this.props.deviceWidth || this.state.deviceWidth;\n        this.onBackButtonPress = () => {\n            if (this.props.onBackButtonPress && this.props.isVisible) {\n                this.props.onBackButtonPress();\n                return true;\n            }\n            return false;\n        };\n        this.shouldPropagateSwipe = (evt, gestureState) => {\n            return typeof this.props.propagateSwipe === 'function'\n                ? this.props.propagateSwipe(evt, gestureState)\n                : this.props.propagateSwipe;\n        };\n        this.buildPanResponder = () => {\n            let animEvt = null;\n            this.panResponder = PanResponder.create({\n                onMoveShouldSetPanResponder: (evt, gestureState) => {\n                    // Use propagateSwipe to allow inner content to scroll. See PR:\n                    // https://github.com/react-native-community/react-native-modal/pull/246\n                    if (!this.shouldPropagateSwipe(evt, gestureState)) {\n                        // The number \"4\" is just a good tradeoff to make the panResponder\n                        // work correctly even when the modal has touchable buttons.\n                        // However, if you want to overwrite this and choose for yourself,\n                        // set panResponderThreshold in the props.\n                        // For reference:\n                        // https://github.com/react-native-community/react-native-modal/pull/197\n                        const shouldSetPanResponder = Math.abs(gestureState.dx) >= this.props.panResponderThreshold ||\n                            Math.abs(gestureState.dy) >= this.props.panResponderThreshold;\n                        if (shouldSetPanResponder && this.props.onSwipeStart) {\n                            this.props.onSwipeStart(gestureState);\n                        }\n                        this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n                        animEvt = this.createAnimationEventForSwipe();\n                        return shouldSetPanResponder;\n                    }\n                    return false;\n                },\n                onStartShouldSetPanResponder: (e, gestureState) => {\n                    const hasScrollableView = e._dispatchInstances &&\n                        e._dispatchInstances.some((instance) => /scrollview|flatlist/i.test(instance.type));\n                    if (hasScrollableView &&\n                        this.shouldPropagateSwipe(e, gestureState) &&\n                        this.props.scrollTo &&\n                        this.props.scrollOffset > 0) {\n                        return false; // user needs to be able to scroll content back up\n                    }\n                    if (this.props.onSwipeStart) {\n                        this.props.onSwipeStart(gestureState);\n                    }\n                    // Cleared so that onPanResponderMove can wait to have some delta\n                    // to work with\n                    this.currentSwipingDirection = null;\n                    return true;\n                },\n                onPanResponderMove: (evt, gestureState) => {\n                    // Using onStartShouldSetPanResponder we don't have any delta so we don't know\n                    // The direction to which the user is swiping until some move have been done\n                    if (!this.currentSwipingDirection) {\n                        if (gestureState.dx === 0 && gestureState.dy === 0) {\n                            return;\n                        }\n                        this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n                        animEvt = this.createAnimationEventForSwipe();\n                    }\n                    if (this.isSwipeDirectionAllowed(gestureState)) {\n                        // Dim the background while swiping the modal\n                        const newOpacityFactor = 1 - this.calcDistancePercentage(gestureState);\n                        this.backdropRef &&\n                            this.backdropRef.transitionTo({\n                                opacity: this.props.backdropOpacity * newOpacityFactor,\n                            });\n                        animEvt(evt, gestureState);\n                        if (this.props.onSwipeMove) {\n                            this.props.onSwipeMove(newOpacityFactor, gestureState);\n                        }\n                    }\n                    else {\n                        if (this.props.scrollTo) {\n                            if (this.props.scrollHorizontal) {\n                                let offsetX = -gestureState.dx;\n                                if (offsetX > this.props.scrollOffsetMax) {\n                                    offsetX -= (offsetX - this.props.scrollOffsetMax) / 2;\n                                }\n                                this.props.scrollTo({ x: offsetX, animated: false });\n                            }\n                            else {\n                                let offsetY = -gestureState.dy;\n                                if (offsetY > this.props.scrollOffsetMax) {\n                                    offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\n                                }\n                                this.props.scrollTo({ y: offsetY, animated: false });\n                            }\n                        }\n                    }\n                },\n                onPanResponderRelease: (evt, gestureState) => {\n                    // Call the onSwipe prop if the threshold has been exceeded on the right direction\n                    const accDistance = this.getAccDistancePerDirection(gestureState);\n                    if (accDistance > this.props.swipeThreshold &&\n                        this.isSwipeDirectionAllowed(gestureState)) {\n                        if (this.props.onSwipeComplete) {\n                            this.inSwipeClosingState = true;\n                            this.props.onSwipeComplete({\n                                swipingDirection: this.getSwipingDirection(gestureState),\n                            }, gestureState);\n                            return;\n                        }\n                        // Deprecated. Remove later.\n                        if (this.props.onSwipe) {\n                            this.inSwipeClosingState = true;\n                            this.props.onSwipe();\n                            return;\n                        }\n                    }\n                    //Reset backdrop opacity and modal position\n                    if (this.props.onSwipeCancel) {\n                        this.props.onSwipeCancel(gestureState);\n                    }\n                    if (this.backdropRef) {\n                        this.backdropRef.transitionTo({\n                            opacity: this.props.backdropOpacity,\n                        });\n                    }\n                    Animated.spring(this.state.pan, {\n                        toValue: { x: 0, y: 0 },\n                        bounciness: 0,\n                        useNativeDriver: false,\n                    }).start();\n                    if (this.props.scrollTo) {\n                        if (this.props.scrollOffset > this.props.scrollOffsetMax) {\n                            this.props.scrollTo({\n                                y: this.props.scrollOffsetMax,\n                                animated: true,\n                            });\n                        }\n                    }\n                },\n            });\n        };\n        this.getAccDistancePerDirection = (gestureState) => {\n            switch (this.currentSwipingDirection) {\n                case 'up':\n                    return -gestureState.dy;\n                case 'down':\n                    return gestureState.dy;\n                case 'right':\n                    return gestureState.dx;\n                case 'left':\n                    return -gestureState.dx;\n                default:\n                    return 0;\n            }\n        };\n        this.getSwipingDirection = (gestureState) => {\n            if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n                return gestureState.dx > 0 ? 'right' : 'left';\n            }\n            return gestureState.dy > 0 ? 'down' : 'up';\n        };\n        this.calcDistancePercentage = (gestureState) => {\n            switch (this.currentSwipingDirection) {\n                case 'down':\n                    return ((gestureState.moveY - gestureState.y0) /\n                        ((this.props.deviceHeight || this.state.deviceHeight) -\n                            gestureState.y0));\n                case 'up':\n                    return reversePercentage(gestureState.moveY / gestureState.y0);\n                case 'left':\n                    return reversePercentage(gestureState.moveX / gestureState.x0);\n                case 'right':\n                    return ((gestureState.moveX - gestureState.x0) /\n                        ((this.props.deviceWidth || this.state.deviceWidth) - gestureState.x0));\n                default:\n                    return 0;\n            }\n        };\n        this.createAnimationEventForSwipe = () => {\n            if (this.currentSwipingDirection === 'right' ||\n                this.currentSwipingDirection === 'left') {\n                return Animated.event([null, { dx: this.state.pan.x }], {\n                    useNativeDriver: false,\n                });\n            }\n            else {\n                return Animated.event([null, { dy: this.state.pan.y }], {\n                    useNativeDriver: false,\n                });\n            }\n        };\n        this.isDirectionIncluded = (direction) => {\n            return Array.isArray(this.props.swipeDirection)\n                ? this.props.swipeDirection.includes(direction)\n                : this.props.swipeDirection === direction;\n        };\n        this.isSwipeDirectionAllowed = ({ dy, dx }) => {\n            const draggedDown = dy > 0;\n            const draggedUp = dy < 0;\n            const draggedLeft = dx < 0;\n            const draggedRight = dx > 0;\n            if (this.currentSwipingDirection === 'up' &&\n                this.isDirectionIncluded('up') &&\n                draggedUp) {\n                return true;\n            }\n            else if (this.currentSwipingDirection === 'down' &&\n                this.isDirectionIncluded('down') &&\n                draggedDown) {\n                return true;\n            }\n            else if (this.currentSwipingDirection === 'right' &&\n                this.isDirectionIncluded('right') &&\n                draggedRight) {\n                return true;\n            }\n            else if (this.currentSwipingDirection === 'left' &&\n                this.isDirectionIncluded('left') &&\n                draggedLeft) {\n                return true;\n            }\n            return false;\n        };\n        this.handleDimensionsUpdate = () => {\n            if (!this.props.deviceHeight && !this.props.deviceWidth) {\n                // Here we update the device dimensions in the state if the layout changed\n                // (triggering a render)\n                const deviceWidth = Dimensions.get('window').width;\n                const deviceHeight = Dimensions.get('window').height;\n                if (deviceWidth !== this.state.deviceWidth ||\n                    deviceHeight !== this.state.deviceHeight) {\n                    this.setState({ deviceWidth, deviceHeight });\n                }\n            }\n        };\n        this.open = () => {\n            if (this.isTransitioning) {\n                return;\n            }\n            this.isTransitioning = true;\n            if (this.backdropRef) {\n                this.backdropRef.transitionTo({ opacity: this.props.backdropOpacity }, this.props.backdropTransitionInTiming);\n            }\n            // This is for resetting the pan position,otherwise the modal gets stuck\n            // at the last released position when you try to open it.\n            // TODO: Could certainly be improved - no idea for the moment.\n            if (this.state.isSwipeable) {\n                this.state.pan.setValue({ x: 0, y: 0 });\n            }\n            if (this.contentRef) {\n                this.props.onModalWillShow && this.props.onModalWillShow();\n                if (this.interactionHandle == null) {\n                    this.interactionHandle = InteractionManager.createInteractionHandle();\n                }\n                this.contentRef\n                    .animate(this.animationIn, this.props.animationInTiming)\n                    .then(() => {\n                    this.isTransitioning = false;\n                    if (this.interactionHandle) {\n                        InteractionManager.clearInteractionHandle(this.interactionHandle);\n                        this.interactionHandle = null;\n                    }\n                    if (!this.props.isVisible) {\n                        this.close();\n                    }\n                    else {\n                        this.props.onModalShow();\n                    }\n                });\n            }\n        };\n        this.close = () => {\n            if (this.isTransitioning) {\n                return;\n            }\n            this.isTransitioning = true;\n            if (this.backdropRef) {\n                this.backdropRef.transitionTo({ opacity: 0 }, this.props.backdropTransitionOutTiming);\n            }\n            let animationOut = this.animationOut;\n            if (this.inSwipeClosingState) {\n                this.inSwipeClosingState = false;\n                if (this.currentSwipingDirection === 'up') {\n                    animationOut = 'slideOutUp';\n                }\n                else if (this.currentSwipingDirection === 'down') {\n                    animationOut = 'slideOutDown';\n                }\n                else if (this.currentSwipingDirection === 'right') {\n                    animationOut = 'slideOutRight';\n                }\n                else if (this.currentSwipingDirection === 'left') {\n                    animationOut = 'slideOutLeft';\n                }\n            }\n            if (this.contentRef) {\n                this.props.onModalWillHide && this.props.onModalWillHide();\n                if (this.interactionHandle == null) {\n                    this.interactionHandle = InteractionManager.createInteractionHandle();\n                }\n                this.contentRef\n                    .animate(animationOut, this.props.animationOutTiming)\n                    .then(() => {\n                    this.isTransitioning = false;\n                    if (this.interactionHandle) {\n                        InteractionManager.clearInteractionHandle(this.interactionHandle);\n                        this.interactionHandle = null;\n                    }\n                    if (this.props.isVisible) {\n                        this.open();\n                    }\n                    else {\n                        this.setState({\n                            showContent: false,\n                        }, () => {\n                            this.setState({\n                                isVisible: false,\n                            }, () => {\n                                this.props.onModalHide();\n                            });\n                        });\n                    }\n                });\n            }\n        };\n        this.makeBackdrop = () => {\n            if (!this.props.hasBackdrop) {\n                return null;\n            }\n            if (this.props.customBackdrop &&\n                !React.isValidElement(this.props.customBackdrop)) {\n                console.warn('Invalid customBackdrop element passed to Modal. You must provide a valid React element.');\n            }\n            const { customBackdrop, backdropColor, useNativeDriver, useNativeDriverForBackdrop, onBackdropPress, } = this.props;\n            const hasCustomBackdrop = !!this.props.customBackdrop;\n            const backdropComputedStyle = [\n                {\n                    width: this.getDeviceWidth(),\n                    height: this.getDeviceHeight(),\n                    backgroundColor: this.state.showContent && !hasCustomBackdrop\n                        ? backdropColor\n                        : 'transparent',\n                },\n            ];\n            const backdropWrapper = (React.createElement(animatable.View, { ref: ref => (this.backdropRef = ref), useNativeDriver: useNativeDriverForBackdrop !== undefined\n                    ? useNativeDriverForBackdrop\n                    : useNativeDriver, style: [styles.backdrop, backdropComputedStyle] }, hasCustomBackdrop && customBackdrop));\n            if (hasCustomBackdrop) {\n                // The user will handle backdrop presses himself\n                return backdropWrapper;\n            }\n            // If there's no custom backdrop, handle presses with\n            // TouchableWithoutFeedback\n            return (React.createElement(TouchableWithoutFeedback, { onPress: onBackdropPress }, backdropWrapper));\n        };\n        const { animationIn, animationOut } = buildAnimations(extractAnimationFromProps(props));\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n        if (this.state.isSwipeable) {\n            this.state = {\n                ...this.state,\n                pan: new Animated.ValueXY(),\n            };\n            this.buildPanResponder();\n        }\n        if (props.isVisible) {\n            this.state = {\n                ...this.state,\n                isVisible: true,\n                showContent: true,\n            };\n        }\n    }\n    static getDerivedStateFromProps(nextProps, state) {\n        if (!state.isVisible && nextProps.isVisible) {\n            return { isVisible: true, showContent: true };\n        }\n        return null;\n    }\n    componentDidMount() {\n        // Show deprecation message\n        if (this.props.onSwipe) {\n            console.warn('`<Modal onSwipe=\"...\" />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n        }\n        this.didUpdateDimensionsEmitter = DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);\n        if (this.state.isVisible) {\n            this.open();\n        }\n        BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPress);\n    }\n    componentWillUnmount() {\n        BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPress);\n        if (this.didUpdateDimensionsEmitter) {\n            this.didUpdateDimensionsEmitter.remove();\n        }\n        if (this.interactionHandle) {\n            InteractionManager.clearInteractionHandle(this.interactionHandle);\n            this.interactionHandle = null;\n        }\n    }\n    componentDidUpdate(prevProps) {\n        // If the animations have been changed then rebuild them to make sure we're\n        // using the most up-to-date ones\n        if (this.props.animationIn !== prevProps.animationIn ||\n            this.props.animationOut !== prevProps.animationOut) {\n            const { animationIn, animationOut } = buildAnimations(extractAnimationFromProps(this.props));\n            this.animationIn = animationIn;\n            this.animationOut = animationOut;\n        }\n        // If backdrop opacity has been changed then make sure to update it\n        if (this.props.backdropOpacity !== prevProps.backdropOpacity &&\n            this.backdropRef) {\n            this.backdropRef.transitionTo({ opacity: this.props.backdropOpacity }, this.props.backdropTransitionInTiming);\n        }\n        // On modal open request, we slide the view up and fade in the backdrop\n        if (this.props.isVisible && !prevProps.isVisible) {\n            this.open();\n        }\n        else if (!this.props.isVisible && prevProps.isVisible) {\n            // On modal close request, we slide the view down and fade out the backdrop\n            this.close();\n        }\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const { animationIn, animationInTiming, animationOut, animationOutTiming, avoidKeyboard, coverScreen, hasBackdrop, backdropColor, backdropOpacity, backdropTransitionInTiming, backdropTransitionOutTiming, customBackdrop, children, isVisible, onModalShow, onBackButtonPress, useNativeDriver, propagateSwipe, style, ...otherProps } = this.props;\n        const { testID, ...containerProps } = otherProps;\n        const computedStyle = [\n            { margin: this.getDeviceWidth() * 0.05, transform: [{ translateY: 0 }] },\n            styles.content,\n            style,\n        ];\n        let panHandlers = {};\n        let panPosition = {};\n        if (this.state.isSwipeable) {\n            panHandlers = { ...this.panResponder.panHandlers };\n            if (useNativeDriver) {\n                panPosition = {\n                    transform: this.state.pan.getTranslateTransform(),\n                };\n            }\n            else {\n                panPosition = this.state.pan.getLayout();\n            }\n        }\n        // The user might decide not to show the modal while it is animating\n        // to enhance performance.\n        const _children = this.props.hideModalContentWhileAnimating &&\n            this.props.useNativeDriver &&\n            !this.state.showContent ? (React.createElement(animatable.View, null)) : (children);\n        const containerView = (React.createElement(animatable.View, Object.assign({}, panHandlers, { ref: ref => (this.contentRef = ref), style: [panPosition, computedStyle], pointerEvents: \"box-none\", useNativeDriver: useNativeDriver }, containerProps), _children));\n        // If coverScreen is set to false by the user\n        // we render the modal inside the parent view directly\n        if (!coverScreen && this.state.isVisible) {\n            return (React.createElement(View, { pointerEvents: \"box-none\", style: [styles.backdrop, styles.containerBox] },\n                this.makeBackdrop(),\n                containerView));\n        }\n        return (React.createElement(Modal, Object.assign({ transparent: true, animationType: 'none', visible: this.state.isVisible, onRequestClose: onBackButtonPress }, otherProps),\n            this.makeBackdrop(),\n            avoidKeyboard ? (React.createElement(KeyboardAvoidingView, { behavior: Platform.OS === 'ios' ? 'padding' : undefined, pointerEvents: \"box-none\", style: computedStyle.concat([{ margin: 0 }]) }, containerView)) : (containerView)));\n    }\n}\nReactNativeModal.propTypes = {\n    animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationInTiming: PropTypes.number,\n    animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationOutTiming: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    coverScreen: PropTypes.bool,\n    hasBackdrop: PropTypes.bool,\n    backdropColor: PropTypes.string,\n    backdropOpacity: PropTypes.number,\n    backdropTransitionInTiming: PropTypes.number,\n    backdropTransitionOutTiming: PropTypes.number,\n    customBackdrop: PropTypes.node,\n    children: PropTypes.node.isRequired,\n    deviceHeight: PropTypes.number,\n    deviceWidth: PropTypes.number,\n    isVisible: PropTypes.bool.isRequired,\n    hideModalContentWhileAnimating: PropTypes.bool,\n    propagateSwipe: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    onModalShow: PropTypes.func,\n    onModalWillShow: PropTypes.func,\n    onModalHide: PropTypes.func,\n    onModalWillHide: PropTypes.func,\n    onBackButtonPress: PropTypes.func,\n    onBackdropPress: PropTypes.func,\n    panResponderThreshold: PropTypes.number,\n    onSwipeStart: PropTypes.func,\n    onSwipeMove: PropTypes.func,\n    onSwipeComplete: PropTypes.func,\n    onSwipeCancel: PropTypes.func,\n    swipeThreshold: PropTypes.number,\n    swipeDirection: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.oneOf(['up', 'down', 'left', 'right'])),\n        PropTypes.oneOf(['up', 'down', 'left', 'right']),\n    ]),\n    useNativeDriver: PropTypes.bool,\n    useNativeDriverForBackdrop: PropTypes.bool,\n    style: PropTypes.any,\n    scrollTo: PropTypes.func,\n    scrollOffset: PropTypes.number,\n    scrollOffsetMax: PropTypes.number,\n    scrollHorizontal: PropTypes.bool,\n    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf([\n        'portrait',\n        'portrait-upside-down',\n        'landscape',\n        'landscape-left',\n        'landscape-right',\n    ])),\n};\nReactNativeModal.defaultProps = defaultProps;\nexport default ReactNativeModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}