{"ast":null,"code":"import AnimatedValue from \"../core/InternalAnimatedValue\";\nimport { createAnimatedSet as set } from \"../core/AnimatedSet\";\nimport { createAnimatedCall as call } from \"../core/AnimatedCall\";\nimport { createAnimatedAlways as always } from \"../core/AnimatedAlways\";\nimport { createAnimatedCond as cond } from \"../core/AnimatedCond\";\nexport function evaluateOnce(node) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  var done = new AnimatedValue(0);\n  var evalNode = cond(done, 0, call([node, set(done, 1)], function () {\n    callback && callback();\n    for (var i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n      alwaysNode.__detach();\n    }\n  }));\n  var alwaysNode = always(evalNode);\n  for (var i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}","map":{"version":3,"names":["AnimatedValue","createAnimatedSet","set","createAnimatedCall","call","createAnimatedAlways","always","createAnimatedCond","cond","evaluateOnce","node","input","arguments","length","undefined","callback","Array","isArray","done","evalNode","i","__removeChild","alwaysNode","__detach","__addChild","__attach"],"sources":["C:/Users/02108980032/Documents/gitclone/SA - App/SA_2023_3B_SesiSenai_Storage/mobile/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js"],"sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < input.length; i++) {\n        input[i].__removeChild(alwaysNode);\n        alwaysNode.__detach();\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}\n"],"mappings":"AAAA,OAAOA,aAAa;AACpB,SAASC,iBAAiB,IAAIC,GAAG;AACjC,SAASC,kBAAkB,IAAIC,IAAI;AACnC,SAASC,oBAAoB,IAAIC,MAAM;AACvC,SAASC,kBAAkB,IAAIC,IAAI;AASnC,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAwB;EAAA,IAAtBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACrD,IAAI,CAACE,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;IACzBA,KAAK,GAAG,CAACA,KAAK,CAAC;EACjB;EACA,IAAMO,IAAI,GAAG,IAAIlB,aAAa,CAAC,CAAC,CAAC;EACjC,IAAMmB,QAAQ,GAAGX,IAAI,CACnBU,IAAI,EACJ,CAAC,EACDd,IAAI,CAAC,CAACM,IAAI,EAAER,GAAG,CAACgB,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,YAAM;IAC/BH,QAAQ,IAAIA,QAAQ,CAAC,CAAC;IACtB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACE,MAAM,EAAEO,CAAC,EAAE,EAAE;MACrCT,KAAK,CAACS,CAAC,CAAC,CAACC,aAAa,CAACC,UAAU,CAAC;MAClCA,UAAU,CAACC,QAAQ,CAAC,CAAC;IACvB;EACF,CAAC,CACH,CAAC;EACD,IAAMD,UAAU,GAAGhB,MAAM,CAACa,QAAQ,CAAC;EACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACE,MAAM,EAAEO,CAAC,EAAE,EAAE;IACrCT,KAAK,CAACS,CAAC,CAAC,CAACI,UAAU,CAACF,UAAU,CAAC;IAC/BA,UAAU,CAACG,QAAQ,CAAC,CAAC;EACvB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}