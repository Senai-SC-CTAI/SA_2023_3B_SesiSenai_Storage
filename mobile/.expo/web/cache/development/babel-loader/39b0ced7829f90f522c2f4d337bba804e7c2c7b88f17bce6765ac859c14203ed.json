{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nvar _stateToPropMappings;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nimport { handlerIDToTag, getNextHandlerTag, registerOldGestureHandler } from \"./handlersRegistry\";\nimport { filterConfig, findNodeHandle, scheduleFlushOperations } from \"./gestureHandlerCommon\";\nimport { isFabric, isJestEnv, tagMessage } from \"../utils\";\nimport { ActionType } from \"../ActionType\";\nimport { PressabilityDebugView } from \"./PressabilityDebugView\";\nvar UIManagerAny = UIManager;\nvar customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nvar customGHEventsConfig = _objectSpread({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, isFabric() && Platform.OS === 'android' && customGHEventsConfigFabricAndroid);\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nvar UNRESOLVED_REFS_RETRY_LIMIT = 1;\nexport default function createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n    var _super = _createSuper(Handler);\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n      _defineProperty(_assertThisInitialized(_this), \"inspectorToggleListener\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onGestureEvent === 'function') {\n            var _this$props$onGesture, _this$props;\n            (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n          }\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onHandlerStateChange === 'function') {\n            var _this$props$onHandler, _this$props3;\n            (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          }\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, ActionType.JS_FUNCTION_OLD_API, _this.propsRef);\n        } else {\n          registerOldGestureHandler(_this.handlerTag, {\n            onGestureEvent: _this.onGestureHandlerEvent,\n            onGestureStateChange: _this.onGestureHandlerStateChange\n          });\n          var actionType = function () {\n            var _this$props5, _this$props6;\n            if ((_this$props5 = _this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && 'current' in _this.props.onGestureEvent) {\n              return ActionType.REANIMATED_WORKLET;\n            } else if ((_this$props6 = _this.props) !== null && _this$props6 !== void 0 && _this$props6.onGestureEvent && '__isNative' in _this.props.onGestureEvent) {\n              return ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              return ActionType.JS_FUNCTION_OLD_API;\n            }\n          }();\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, actionType);\n        }\n        scheduleFlushOperations();\n      });\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n        scheduleFlushOperations();\n      });\n      _this.handlerTag = getNextHandlerTag();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n        scheduleFlushOperations();\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(remainingTries) {\n        var _this3 = this;\n        var props = this.props;\n        if (hasUnresolvedRefs(props) && remainingTries > 0) {\n          this.updateEnqueued = setImmediate(function () {\n            _this3.updateEnqueued = null;\n            _this3.update(remainingTries - 1);\n          });\n        } else {\n          var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n          if (!deepEqual(this.config, newConfig)) {\n            this.updateGestureHandler(newConfig);\n          }\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props$testID;\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props7 = this.props,\n          onGestureEvent = _this$props7.onGestureEvent,\n          onGestureHandlerEvent = _this$props7.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props8 = this.props,\n          onHandlerStateChange = _this$props8.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props8.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = null;\n        try {\n          child = React.Children.only(this.props.children);\n        } catch (e) {\n          throw new Error(tagMessage(name + \" got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));\n        }\n        var grandChildren = child.props.children;\n        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(React.createElement(PressabilityDebugView, {\n            key: \"pressabilityDebugView\",\n            color: \"mediumspringgreen\",\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, _objectSpread(_objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, isJestEnv() ? {\n          handlerType: name,\n          handlerTag: this.handlerTag\n        } : {}), {}, {\n          testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","registerOldGestureHandler","filterConfig","findNodeHandle","scheduleFlushOperations","isFabric","isJestEnv","tagMessage","ActionType","PressabilityDebugView","UIManagerAny","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_stateToPropMappings","_defineProperty2","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_defineProperty","_assertThisInitialized","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","id","Error","_createClass","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","concat","_toConsumableArray","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","clearImmediate","handlerID","remainingTries","_this3","setNativeProps","updates","mergedProps","render","_this$props$testID","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","e","grandChildren","type","displayName","toArray","push","createElement","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component"],"sources":["E:\\Senai\\SA_3°Ano\\SA_2023_3B_SesiSenai_Storage\\mobile\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}