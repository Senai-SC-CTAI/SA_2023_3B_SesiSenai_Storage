{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { EventTypes, MouseButtons, PointerType } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { isPointerInBounds } from \"../utils\";\nvar PointerEventManager = function (_EventManager) {\n  _inherits(PointerEventManager, _EventManager);\n  var _super = _createSuper(PointerEventManager);\n  function PointerEventManager() {\n    _classCallCheck(this, PointerEventManager);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PointerEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this = this;\n      this.view.addEventListener('pointerdown', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (!isPointerInBounds(_this.view, {\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n        var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN);\n        var target = event.target;\n        target.setPointerCapture(adaptedEvent.pointerId);\n        _this.markAsInBounds(adaptedEvent.pointerId);\n        if (++_this.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n          _this.onPointerAdd(adaptedEvent);\n        } else {\n          _this.onPointerDown(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (_this.activePointersCounter === 0) {\n          return;\n        }\n        var adaptedEvent = _this.mapEvent(event, EventTypes.UP);\n        var target = event.target;\n        target.releasePointerCapture(adaptedEvent.pointerId);\n        _this.markAsOutOfBounds(adaptedEvent.pointerId);\n        if (--_this.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n          _this.onPointerRemove(adaptedEvent);\n        } else {\n          _this.onPointerUp(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (event.pointerType === PointerType.MOUSE && event.buttons !== MouseButtons.LEFT) {\n          return;\n        }\n        var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE);\n        var inBounds = isPointerInBounds(_this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n        var pointerIndex = _this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n            _this.onPointerEnter(adaptedEvent);\n            _this.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n            _this.onPointerOut(adaptedEvent);\n            _this.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL);\n        _this.onPointerCancel(adaptedEvent);\n        _this.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this.activePointersCounter = 0;\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }]);\n  return PointerEventManager;\n}(EventManager);\nexport { PointerEventManager as default };","map":{"version":3,"names":["EventTypes","MouseButtons","PointerType","EventManager","isPointerInBounds","PointerEventManager","_EventManager","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","setListeners","_this","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","markAsInBounds","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOUSE","buttons","LEFT","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","CANCEL","onPointerCancel","offsetX","offsetY","time","timeStamp","default"],"sources":["C:\\Users\\pedro_hf_rocha\\Documents\\SA_2023_3B_SesiSenai_Storage\\mobile\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerEventManager.ts"],"sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    });\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}